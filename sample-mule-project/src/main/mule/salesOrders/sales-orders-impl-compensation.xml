<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:avio-core="http://www.mulesoft.org/schema/mule/avio-core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/avio-core http://www.mulesoft.org/schema/mule/avio-core/current/mule-avio-core.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
	<sub-flow name="publish-error-mq" doc:id="a5499dc4-d90e-402b-935f-e1cdb2c1543d" >
		<ee:transform doc:name="payload SalesOrderErrorQueue" doc:id="3973d31d-25ad-44f0-b024-faadacb7409f">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
var unionErrorPayload = if(!isEmpty(vars.errorPayload[1])) (vars.errorPayload[0] ++ vars.errorPayload[1])  else vars.errorPayload[0]
var newErrorPayload = if(isEmpty(vars.errorPayload[1])) (unionErrorPayload update "errorAdjustments" with vars.errorAdjustments default []) else unionErrorPayload
---
{
    "SalesOrder": vars.salesOrderDetails.salesOrder,
    "Error": newErrorPayload default ""
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<vm:publish doc:name="Publish SalesOrdersErrorQueue" doc:id="c7549311-b741-4675-b6a4-6eb613740a77" config-ref="SalesOrdersQueue_Config" correlationId="#[vars.salesOrderDetails.correlationId]" queueName="SalesOrdersErrorQueue" sendCorrelationId="ALWAYS" />
	</sub-flow>
	<flow name="sales-orders-impl-compensation" doc:id="4509daf5-628e-4713-8929-ad8799f7086f" >
		<avio-core:custom-logger doc:name="INFO START" doc:id="72709482-e36b-4213-966a-80db4792b9c3" config-ref="avio-core-config" category="${log.cat}" logLocationInfo="true" correlation_id="#[vars.salesOrderDetails.correlationId]" message="#['START::sales-orders-impl-compensation']"/>		
		<choice doc:name="Which system failed?" doc:id="cab99f5d-971f-4ff3-8178-87a1a706e8e0" >
			<when expression="#[!(vars.shippingFail as Boolean) and vars.schedulerFail]">
				<ee:transform doc:name="itemPayload Reversal" doc:id="f2eb95cb-1d2a-46fd-b7cc-8af9b6e78ddc">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
var newShippingItems = vars.itemPayload.shippingItems map((item, index) -> item update "quantityOrdered" with item.quantityOrdered * (-1))
---
vars.itemPayload update "shippingItems" with newShippingItems]]></ee:set-payload>
							</ee:message>
						</ee:transform>
				<flow-ref doc:name="productItem-shipping" doc:id="6485ecfc-8ebd-426e-9319-cff1eddf666c" name="productItem-shipping" />
				<ee:transform doc:name="errorAdjustments" doc:id="1c39f8ea-74eb-4f57-a1a2-23b7f79e4d73" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="errorAdjustments" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
var salesOrder = vars.salesOrderDetails.salesOrder
var products = salesOrder.lineItems filter ($.itemType == 'Product')
var newProducts = products map((item, index) -> item update "quantity" with item.quantity * (-1))
---
newProducts default []]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</when>
			<when expression="#[vars.shippingFail and !(vars.schedulerFail as Boolean)]">
				<ee:transform doc:name="servicePayload Reversal" doc:id="2489dc96-4c9b-4c21-8fb1-e386ddb519ea" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
var newServiceItems = vars.servicePayload[0].serviceItems map((item, index) -> item update "quantityOrdered" with item.quantityOrdered * (-1))
---
[vars.servicePayload[0]  update "serviceItems" with newServiceItems]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<flow-ref doc:name="serviceItem-scheduling" doc:id="d69d7049-1b15-4136-9948-14dca9c7126a" name="serviceItem-scheduling"/>
				<ee:transform doc:name="errorAdjustments" doc:id="90693482-c063-42a6-ab24-80664cb7b164" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="errorAdjustments" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
var salesOrder = vars.salesOrderDetails.salesOrder
var services = salesOrder.lineItems filter ($.itemType == 'Service')
var newServices = services map((item, index) -> item update "quantity" with item.quantity * (-1))
---
newServices default []]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</when>
			<otherwise >
				<avio-core:custom-logger doc:name="INFO Shipping and Scheduler Failed" doc:id="2667a043-6c6b-4b89-8dd7-5198e1f5a627" config-ref="avio-core-config" message="#['sales-orders-impl-compensation::Shipping and Scheduler Failed']" correlation_id="#[vars.salesOrderDetails.correlationId]"/>
			</otherwise>
		</choice>
		<flow-ref doc:name="publish-error-mq" doc:id="c6263b08-fefb-45dc-be88-c732b3ffc9fc" name="publish-error-mq" />
		<avio-core:custom-logger doc:name="END payload" doc:id="b401a806-4602-4e59-8a3a-6be3bf7375d0" config-ref="avio-core-config" category="${log.cat}" logLocationInfo="true" correlation_id="#[vars.salesOrderDetails.correlationId]" message="#['sales-orders-impl-compensation::errorAdjustments: ' ++ write(vars.errorAdjustments, &quot;application/json&quot;)]"/>
	</flow>
</mule>
